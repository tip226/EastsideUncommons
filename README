# CSE241 Final Project - Tina Pham

## Author
- **Name:** Tina Pham
- **Email:** [tip226@lehigh.edu](mailto:tip226@lehigh.edu)

## Reading the README file
If you wish to open the README from the terminal, you can use the following command:
```
cat README
```
## Running the Application

### As a Jar File
Run the JAR file with:
```
java -jar tip226.jar
```

### Compilation
There's a makefile included in the `src` folder. To compile the program, run the following command in the `src` folder:
```
make
```

This compiles all files and runs the code. The program uses `Console.readPassword()` to hide password inputs.

### Testing the Program
After entering the username and password, choose between different interfaces. The Developer Interface is for internal use, not submitted for grading/testing. Feel free to intentionally input invalid data to test the validation. I also noted down a test case throughout for better demo of the program.

#### Property Manager Interface
This interface allows for recording visit data and lease data, move-out date, adding a person to lease, and adding a pet to tenant.

1. **Record Visit Data:** Adds a new prospective tenant.

2. **Record Lease Data:** User has to enter a number of tenants that is >= 1 and <= capacity (capacity is the number of bedrooms in the apartment). For now, a pet will be treated as a tenant so if the user has a pet, the number of tenants will be 1 + number of pets. Depends on how many tenants user enters, the loop will keep asking user to enter the info for the tenants and pets. Enter T for tenant and P for pet here. I assume that user won't abruptly terminate the program until they finish entering all the info for the tenants and pets. If they do, the lease might be created without associating with a tenant. Here are my suggestions for testing this feature:

        - Apartment ID: 4
        - Lease Start Date: 2024-01-01 
        - Lease End Date: 2025-01-01 (here you can intentionally try to enter a date before lease start date and it won't let you)
        - Monthly Rent: 700
        - Security Deposit: 700
        - Number of tenants: 2 (and then enter the info for the tenants and pets)

3. **Set Move-Out Date:** The `MoveOutDate` column in the `Lease` table is initially set to `NULL` and the `DamageAssessed` is initially set to `N` when inserting a new lease. When setting a move-out date, it will change to the date that the user enters. It'll also asks if there were any damages and set to `Y` if there were damages. This information will be used to determine whether to return the security deposit or not when calculating the payment in Tenant interface. Here are my suggestions for testing this feature:

        - Apartment ID: 4
        - Move-Out Date: 2025-01-01
        - Were there any damages? Y

4. **Add Person to Lease:** The tenant will be associated with the lease that user chooses. The tenant will be added to the lease only if the lease is not full. The program will check for capacity before adding a tenant to lease. Here you can try to add a tenant to a lease that is already full and the program will display a message saying that the lease is full. Here are my suggestions for testing this feature:

        - Lease ID: 4

5. **Add Pet to Tenant:** The pet will be associated with the tenant that user chooses.

#### Tenant Interface
This interface allows for checking payment status, making payments, updating personal data, adding tenant(s) to lease, and adding pet(s) to tenant. When entering the interface, user has to first enter a tenant id and a date. The date is for the payment calculations. If you want to see how amenities are calculated in payment, I suggest you go to the `Company Manager Interface` and then come back to this interface to test the payment.
- Before lease start date payment: security deposit + one-time amenities
- On and after lease start date payment: monthly rent + monthly amenities
- On and after lease end date payment: return deposit if no damages (property manager can input damage when setting move-out date)
- Assumption: All amenities one-time cost are added before tenants go to pay the first time
- Assumption: Tenants don't have past dues. The program will check if there are any payments made withn the month that user enters when first prompted at the beginning of the tenant interface. If there is already a record of payment in the table for that month, it will say all payments for the month are up to date.

        - Tenant ID: 1 (you can also enter a tenant id that you created in the property manager interface)
        - Date: 2024-05-05 (you can also enter the date before lease start date, between lease start date and lease end date, and after lease end date to test the payment calculations)

1. **Check Payment Status:** Displays the payment status for the month that user enters. If there is already a record of payment in the table for that month, it will say all payments for the month are up to date. If not, it will display the amount due for the month. Here are my suggestions for testing this feature:

2. **Make Payment:** User can choose to pay for the month that user enters or pay for the month that user enters and the previous months.

3. **Update Personal Data:** User can update name, email, phone number, and credit score. 

4. **Add Tenant to Lease:** Similar to property manager interface.

5. **Add Pet to Tenant:** Similar to property manager interface.

#### Company Manager Interface
This interface allows for managing properties, apartments, and amenities.

1. Manage Properties
    - **Add Property:** Adds a new property.
    - **Edit Property:** Edit a property.
2. Manage Apartments
    - **Automatically Generate Apartments for a Property:** User can choose a property id and enter the characteristics of the apartments that user wants to generate. The program will generate apartments for that property. Here are my suggestions for testing this feature:

            - Property ID: 2
            - Apartment size: 500
            - Number of bedrooms: 2
            - Number of bathrooms: 1.5
            - Monthly rent: 500
            - Security Deposit: 500
            - Add amenities? Say yes here and choose assign common amenities to a property (all apartments) or assign private amenities to an apartment (one apartment at a time)

    - **Edit Apartment:** Edit an apartment.

3. Manage Amenities
    - **Add New Common Amenity:** Adds a new common amenity for a property.
    - **Edit Common Amenity:** Edit a common amenity.
    - **Add New Private Amenity:** Adds a new private amenity for an apartment.
    - **Edit Private Amenity:** Edit a private amenity.

4. Assign Common Amenity to Property

5. Assign Private Amenity to Apartment

#### Financial Manager Interface
This read-only interface allows for generating financial reports and viewing financial data.

1. View Property Data: View the total rent and number of leases for each property.
2. View Enterprise Financial Report: I joined the tables here to calculate the total revenue from rents and amenities.

### Interfaces Overview
Each interface in the system serves a specific role:

- **Property Manager Interface:** Manages property-related data.
- **Tenant Interface:** Allows tenants to check payment status, make payments, update personal data, add tenant(s) to lease. and add pet(s) to tenant.
- **Company Manager Interface:** Manages company-level operations and data.
- **Financial Manager Interface:** Generates financial reports and views financial data.
- **Developer Interface:** Aids in database management and setup (not for testing).

### Assumptions and Notes
- Assumptions are noted throughout the explanation of each interface.
- Tenants can only sign one lease.
- An apartment can have only one lease.

### Credits
- `DBTablePrinter` code adapted from [GitHub - htorun/dbtableprinter](https://github.com/htorun/dbtableprinter).
- Some of the data used in this project is generated or sourced from [Mockaroo](https://www.mockaroo.com/).

---